diff --git a/Jelly/app/src/main/java/org/lineageos/jelly/MainActivity.java b/app/src/main/java/org/lineageos/jelly/MainActivity.java
index aa2370d..4c3a284 100644
--- a/Jelly/app/src/main/java/org/lineageos/jelly/MainActivity.java
+++ b/Jelly/app/src/main/java/org/lineageos/jelly/MainActivity.java
@@ -63,6 +63,7 @@ import android.view.WindowManager;
 import android.view.inputmethod.EditorInfo;
 import android.webkit.CookieManager;
 import android.webkit.URLUtil;
+import android.webkit.ValueCallback;
 import android.webkit.WebChromeClient;
 import android.widget.AutoCompleteTextView;
 import android.widget.EditText;
@@ -117,6 +118,7 @@ public class MainActivity extends WebViewExtActivity implements
         }
     };
 
+    private ValueCallback<Uri[]> mPathCallback;
     private CoordinatorLayout mCoordinator;
     private WebViewExt mWebView;
     private ProgressBar mLoadingProgress;
@@ -637,8 +639,8 @@ public class MainActivity extends WebViewExtActivity implements
         mCustomView.setBackgroundColor(ContextCompat.getColor(this, android.R.color.black));
         addContentView(mCustomView, new ViewGroup.LayoutParams(
                 ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
-        findViewById(R.id.app_bar_layout).setVisibility(View.GONE);
-        findViewById(R.id.web_view_container).setVisibility(View.GONE);
+        //findViewById(R.id.app_bar_layout).setVisibility(View.GONE);
+        //findViewById(R.id.web_view_container).setVisibility(View.GONE);
     }
 
     @Override
@@ -648,13 +650,15 @@ public class MainActivity extends WebViewExtActivity implements
         }
         getWindow().clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
         setImmersiveMode(false);
-        findViewById(R.id.app_bar_layout).setVisibility(View.VISIBLE);
-        findViewById(R.id.web_view_container).setVisibility(View.VISIBLE);
+        //findViewById(R.id.app_bar_layout).setVisibility(View.VISIBLE);
+        //findViewById(R.id.web_view_container).setVisibility(View.VISIBLE);
         ViewGroup viewGroup = (ViewGroup) mCustomView.getParent();
         viewGroup.removeView(mCustomView);
         mFullScreenCallback.onCustomViewHidden();
         mFullScreenCallback = null;
         mCustomView = null;
+
+	findViewById(R.id.app_bar_layout).requestFocus();
     }
 
     private void addShortcut() {
@@ -730,4 +734,16 @@ public class MainActivity extends WebViewExtActivity implements
             }
         }
     }
+
+    public void setPathCallback(ValueCallback<Uri[]> path) {
+        mPathCallback = path;
+    }
+
+    @Override
+    protected void onActivityResult(int requestCode, int resultCode, Intent intent) {
+        if (requestCode == WebViewExtActivity.REQUEST_SELECT_FILE && mPathCallback != null) {
+            mPathCallback.onReceiveValue(WebChromeClient.FileChooserParams.parseResult(resultCode, intent));
+            mPathCallback = null;
+        }
+    }
 }
diff --git a/Jelly/app/src/main/java/org/lineageos/jelly/webview/ChromeClient.java b/app/src/main/java/org/lineageos/jelly/webview/ChromeClient.java
index acf91be..1a2fd46 100644
--- a/Jelly/app/src/main/java/org/lineageos/jelly/webview/ChromeClient.java
+++ b/Jelly/app/src/main/java/org/lineageos/jelly/webview/ChromeClient.java
@@ -76,9 +76,10 @@ class ChromeClient extends WebChromeClientCompat {
     @Override
     public boolean onShowFileChooser(WebView view, ValueCallback<Uri[]> path,
                                      FileChooserParams params) {
-        Intent intent = params.createIntent();
         try {
-            mActivity.startActivity(intent);
+            Intent intent = params.createIntent();
+            mActivity.setPathCallback(path);
+            mActivity.startActivityForResult(intent, WebViewExtActivity.REQUEST_SELECT_FILE);
         } catch (ActivityNotFoundException e) {
             Toast.makeText(mActivity, mActivity.getString(R.string.error_no_activity_found),
                     Toast.LENGTH_LONG).show();
diff --git a/Jelly/app/src/main/java/org/lineageos/jelly/webview/WebViewExtActivity.java b/app/src/main/java/org/lineageos/jelly/webview/WebViewExtActivity.java
index dcf02d4..0b90eb1 100644
--- a/Jelly/app/src/main/java/org/lineageos/jelly/webview/WebViewExtActivity.java
+++ b/Jelly/app/src/main/java/org/lineageos/jelly/webview/WebViewExtActivity.java
@@ -16,12 +16,16 @@
 package org.lineageos.jelly.webview;
 
 import android.graphics.Bitmap;
+import android.net.Uri;
 import android.support.v7.app.AppCompatActivity;
 import android.view.View;
+import android.webkit.ValueCallback;
 import android.webkit.WebChromeClient;
 
 public abstract class WebViewExtActivity extends AppCompatActivity {
 
+    public static final int REQUEST_SELECT_FILE = 100;
+
     public abstract void downloadFileAsk(String url, String contentDisposition, String mimeType);
 
     public abstract boolean hasLocationPermission();
@@ -37,4 +41,6 @@ public abstract class WebViewExtActivity extends AppCompatActivity {
     public abstract void onShowCustomView(View view, WebChromeClient.CustomViewCallback callback);
 
     public abstract void onHideCustomView();
+
+    public abstract void setPathCallback(ValueCallback<Uri[]> path);
 }
diff --git a/FMRadio/jni/fmr/Android.mk b/FMRadio/jni/fmr/Android.mk
index b685b68..cff81c3 100644
--- a/FMRadio/jni/fmr/Android.mk
+++ b/FMRadio/jni/fmr/Android.mk
@@ -16,6 +16,10 @@ LOCAL_PATH := $(call my-dir)
 
 include $(CLEAR_VARS)
 
+ifeq ($(BOARD_SPRD_WCNBT_MARLIN), true)
+    LOCAL_CFLAGS := -DSPRD_WCN_MARLIN
+endif
+
 LOCAL_SRC_FILES := \
     fmr_core.cpp \
     fmr_err.cpp \
diff --git a/FMRadio/jni/fmr/fmr_core.cpp b/FMRadio/jni/fmr/fmr_core.cpp
index 10c2511..aaa30a3 100644
--- a/FMRadio/jni/fmr/fmr_core.cpp
+++ b/FMRadio/jni/fmr/fmr_core.cpp
@@ -29,6 +29,12 @@
  *******************************************************************/
 
 #include "fmr.h"
+#include <stdio.h>
+#include <stdlib.h>  
+#include <stdarg.h>
+#include <unistd.h>  
+#include <cutils/sockets.h>
+#include <signal.h>
 
 #ifdef LOG_TAG
 #undef LOG_TAG
@@ -50,6 +56,9 @@ struct fmr_ds *pfmr_data[FMR_MAX_IDX] = {0};
 #define FMR_cust_hdler(idx) ((pfmr_data[idx])->custom_handler)
 #define FMR_get_cfg(idx) ((pfmr_data[idx])->get_cfg)
 
+static int start_cp2(void);
+static int stop_cp2(void);
+
 int FMR_get_cfgs(int idx)
 {
     int ret = -1;
@@ -150,9 +159,17 @@ int FMR_open_dev(int idx)
 
     FMR_ASSERT(FMR_cbk_tbl(idx).open_dev);
 
+#ifdef SPRD_WCN_MARLIN
+    ret = start_cp2();
+    if (ret == -1) return 0;
+#endif
+
     ret = FMR_cbk_tbl(idx).open_dev(FM_DEV_NAME, &FMR_fd(idx));
     if (ret || FMR_fd(idx) < 0) {
         LOGE("%s failed, [fd=%d]\n", __func__, FMR_fd(idx));
+#ifdef SPRD_WCN_MARLIN
+        stop_cp2();
+#endif
         return ret;
     }
 
@@ -175,6 +192,12 @@ int FMR_close_dev(int idx)
     FMR_ASSERT(FMR_cbk_tbl(idx).close_dev);
     ret = FMR_cbk_tbl(idx).close_dev(FMR_fd(idx));
     LOGD("%s, [fd=%d] [ret=%d]\n", __func__, FMR_fd(idx), ret);
+
+#ifdef SPRD_WCN_MARLIN
+    ret = stop_cp2();
+    if (ret == -1) return 0;
+#endif
+
     return ret;
 }
 
@@ -187,12 +210,18 @@ int FMR_pwr_up(int idx, int freq)
     LOGI("%s,[freq=%d]\n", __func__, freq);
     if (freq < fmr_data.cfg_data.low_band || freq > fmr_data.cfg_data.high_band) {
         LOGE("%s error freq: %d\n", __func__, freq);
+#ifdef SPRD_WCN_MARLIN
+        stop_cp2();
+#endif
         ret = -ERR_INVALID_PARA;
         return ret;
     }
     ret = FMR_cbk_tbl(idx).pwr_up(FMR_fd(idx), fmr_data.cfg_data.band, freq);
     if (ret) {
         LOGE("%s failed, [ret=%d]\n", __func__, ret);
+#ifdef SPRD_WCN_MARLIN
+        stop_cp2();
+#endif
     }
     fmr_data.cur_freq = freq;
     LOGD("%s, [ret=%d]\n", __func__, ret);
@@ -841,3 +870,119 @@ int FMR_ana_switch(int idx, int antenna)
     return ret;
 }
 
+// blow is the cp2 control functions
+
+#define WCND_SOCKET_NAME "wcnd"
+#define WCND_FM_CMD_STR_START_CP2 "wcn FM-OPEN"
+#define WCND_FM_CMD_STR_STOP_CP2 "wcn FM-CLOSE"
+#define WCND_RESP_STR_BT_OK "BTWIFI-CMD OK"
+
+static int connect_wcnd(void)
+{
+    int client_fd = -1;
+    int retry_count = 20;
+    struct timeval rcv_timeout;
+
+    client_fd = socket_local_client( WCND_SOCKET_NAME,
+    ANDROID_SOCKET_NAMESPACE_ABSTRACT, SOCK_STREAM);
+
+    while (client_fd < 0 && retry_count > 0) {
+        retry_count--;
+        ALOGD("fm-native : %s: Unable bind server %s, waiting...\n",__func__, WCND_SOCKET_NAME);
+        usleep(100*1000);
+        client_fd = socket_local_client( WCND_SOCKET_NAME,
+            ANDROID_SOCKET_NAMESPACE_ABSTRACT, SOCK_STREAM);
+    }
+
+    if (client_fd < 0)
+        return client_fd;
+
+    rcv_timeout.tv_sec = 10;
+    rcv_timeout.tv_usec = 0;
+    if (setsockopt(client_fd, SOL_SOCKET, SO_RCVTIMEO, 
+            (char*)&rcv_timeout, sizeof(rcv_timeout)) < 0) {
+        LOGE("fm-native : %s: set receive timeout fail\n",__func__);
+    }
+
+    LOGE("fm-native : %s: connect to server status:%d\n",__func__, client_fd);
+
+    return client_fd;
+}
+
+static int start_cp2(void)
+{
+    char buffer[128];
+    int len = 0;
+    int ret = -1;
+    int wcnd_socket = connect_wcnd();
+
+    if (wcnd_socket < 0) {
+        LOGD("fm-native : %s: connect to server failed", __func__);
+        return  -1;
+    }
+
+    len = strlen(WCND_FM_CMD_STR_START_CP2) + 1;
+
+    LOGD("fm-native : %s: send start cp2 message to wcnd %s\n",__func__, WCND_FM_CMD_STR_START_CP2);
+
+    ret = TEMP_FAILURE_RETRY(write(wcnd_socket, WCND_FM_CMD_STR_START_CP2, len));
+
+    if (ret <= 0) {
+        LOGD("fm-native : %s: write to wcnd fail.", __func__);
+        close(wcnd_socket);
+        return ret;
+    }
+
+    memset(buffer, 0, 128);
+
+    LOGD("fm-native: %s: waiting for server %s\n",__func__, WCND_SOCKET_NAME);
+    ret = read(wcnd_socket, buffer, 128);
+
+    LOGD("fm-native : %s: get %d bytes %s\n", __func__, ret, buffer);
+
+    if (!strstr(buffer, WCND_RESP_STR_BT_OK))
+        ret = -1;
+
+    close(wcnd_socket);
+    return ret;
+}
+
+static int stop_cp2(void)
+{
+    char buffer[128];
+    int len = 0;
+    int ret = -1;
+    int wcnd_socket = connect_wcnd();
+
+    if (wcnd_socket < 0) {
+        LOGD("fm-native : %s: connect to server failed", __func__);
+        return  -1;
+    }
+
+    len = strlen(WCND_FM_CMD_STR_STOP_CP2) + 1;
+
+    LOGD("fm-native : %s: send stop cp2 message to wcnd %s\n", __func__, WCND_FM_CMD_STR_STOP_CP2);
+
+    ret = TEMP_FAILURE_RETRY(write(wcnd_socket, WCND_FM_CMD_STR_STOP_CP2, len));
+
+    if (ret <= 0) {
+        LOGD("fm-native : %s: write to wcnd fail.", __func__);
+        close(wcnd_socket);
+        return ret;
+    }
+
+    memset(buffer, 0, 128);
+
+    LOGD("fm-native : %s: waiting for server %s\n", __func__, WCND_SOCKET_NAME);
+    ret = read(wcnd_socket, buffer, 128);
+
+    LOGD("fm-native : %s: get %d bytes %s\n", __func__, ret, buffer);
+
+    if (!strstr(buffer, WCND_RESP_STR_BT_OK))
+        ret = -1;
+
+    close(wcnd_socket);
+    return ret;
+}
+
+
